module adder(
    input  wire a,
    input  wire b,
    input  wire cin,
    output wire sum,
    output wire p,
    output wire g
);
    assign sum = a ^ b ^ cin;
    assign p = a | b;      // Propagate
    assign g = a & b;      // Generate
endmodule

module skip_logic(
    input  wire [3:0] p,    // Propagate signals from 4-bit block
    input  wire cin,        // Carry in to the block
    input  wire cout,       // Carry out from ripple carry within block
    output wire skip_cout   // Skip carry out
);
    assign skip_cout = (&p) ? cin : cout;
endmodule

module carry_skip_adder_32bit(
    input  wire [31:0] a,
    input  wire [31:0] b,
    input  wire cin,
    output wire [31:0] sum,
    output wire cout
);
    // Chia thành 8 khối 4-bit
    wire [7:0] block_p;       // Tín hiệu propagate từ mỗi khối
    wire [7:0] block_g;       // Tín hiệu generate từ mỗi khối
    wire [7:0] block_cout;    // Carry out ripple của mỗi khối
    wire [7:0] block_cin;     // Carry in của mỗi khối
    
    assign block_cin[0] = cin;
    
    genvar i;
    generate
        for(i = 0; i < 8; i = i + 1) begin : BLOCK
            // Tạo 4 full adders cho mỗi khối 4-bit
            wire [3:0] p_bits, g_bits;
            wire [3:0] sum_bits;
            wire carry;
            
            // Bit 0
            adder adder0(
                .a(a[i*4 + 0]),
                .b(b[i*4 + 0]),
                .cin(block_cin[i]),
                .sum(sum_bits[0]),
                .p(p_bits[0]),
                .g(g_bits[0])
            );
            
            // Bit 1
            adder adder1(
                .a(a[i*4 + 1]),
                .b(b[i*4 + 1]),
                .cin(g_bits[0] | (p_bits[0] & block_cin[i])),
                .sum(sum_bits[1]),
                .p(p_bits[1]),
                .g(g_bits[1])
            );
            
            // Bit 2
            wire c2 = g_bits[1] | (p_bits[1] & g_bits[0]) | (p_bits[1] & p_bits[0] & block_cin[i]);
            adder adder2(
                .a(a[i*4 + 2]),
                .b(b[i*4 + 2]),
                .cin(c2),
                .sum(sum_bits[2]),
                .p(p_bits[2]),
                .g(g_bits[2])
            );
            
            // Bit 3
            wire c3 = g_bits[2] | (p_bits[2] & g_bits[1]) | 
                      (p_bits[2] & p_bits[1] & g_bits[0]) | 
                      (p_bits[2] & p_bits[1] & p_bits[0] & block_cin[i]);
            adder adder3(
                .a(a[i*4 + 3]),
                .b(b[i*4 + 3]),
                .cin(c3),
                .sum(sum_bits[3]),
                .p(p_bits[3]),
                .g(g_bits[3])
            );
            
            // Tính carry out ripple của khối
            assign block_cout[i] = g_bits[3] | 
                                 (p_bits[3] & g_bits[2]) | 
                                 (p_bits[3] & p_bits[2] & g_bits[1]) | 
                                 (p_bits[3] & p_bits[2] & p_bits[1] & g_bits[0]) | 
                                 (p_bits[3] & p_bits[2] & p_bits[1] & p_bits[0] & block_cin[i]);
            
            // Tín hiệu propagate của cả khối
            assign block_p[i] = &p_bits;
            
            // Skip logic
            skip_logic skip(
                .p(p_bits),
                .cin(block_cin[i]),
                .cout(block_cout[i]),
                .skip_cout(block_cin[i+1])
            );
            
            // Gán kết quả sum
            assign sum[i*4 + 3 : i*4] = sum_bits;
        end
    endgenerate
    
    assign cout = block_cin[8];
endmodule